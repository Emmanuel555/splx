#include "catch.hpp"
#include <splx/curve/Bezier.hpp>
#include <splx/internal/bezier.hpp>
#include <stdexcept>
#include <splx/opt/BezierQPGenerator.hpp>

TEST_CASE("initialization of Bezier curves", "[bezier]") {
    using Bez = splx::Bezier<double, 3>;
    using VectorDIM = Bez::VectorDIM;
    using Row = Bez::Row;
    using Hyperplane = Bez::Hyperplane;
    using ControlPoints = Bez::ControlPoints;

    VectorDIM zero_vecdim;
    zero_vecdim.setZero();

    double double_eq_epsilon = 1e-13;

    SECTION("bezier curve with no control points") {
        splx::Bezier<double, 3> bez;


        REQUIRE(bez.maxParameter() == 0);
        REQUIRE(bez.numControlPoints() == 0);

        SECTION("eval") {
            for(unsigned int k = 0; k < 10; k++) {
                REQUIRE(bez.eval(0, 0) == zero_vecdim);
            }

            REQUIRE_THROWS_AS(bez.eval(0.0001, 0), std::domain_error);
            REQUIRE_THROWS_AS(bez.eval(-1, 0), std::domain_error);
        }

        SECTION("onNegativeSide") {
            VectorDIM normal(1, 1, 1);
            Hyperplane hp(normal, -1);

            REQUIRE(bez.onNegativeSide(hp));

            Hyperplane hp2(normal, 0);
            REQUIRE(!bez.onNegativeSide(hp2));
        }

        SECTION("onNonPositiveSide") {
            VectorDIM normal(1, 1, 1);
            Hyperplane hp(normal, -1);
            REQUIRE(bez.onNonPositiveSide(hp));

            Hyperplane hp2(normal, 0);
            REQUIRE(bez.onNonPositiveSide(hp2));
        }
    }

    SECTION("bezier curve *with* a lot of control points") {
        SECTION("linear bezier curve") {
            ControlPoints cpts;
            for(int i = 0; i < 100; i++) {
                VectorDIM cpt(i, i, i);
                cpts.push_back(cpt);
            }

            Bez bez(111, cpts);

            REQUIRE(bez.maxParameter() == 111);
            bez.maxParameter(120);
            REQUIRE(bez.maxParameter() == 120);
            REQUIRE(bez.numControlPoints() == 100);

            for(int i = 0; i < 100; i++) {
                REQUIRE(bez[i] == VectorDIM(i, i, i));
            }

            REQUIRE(bez.degree() == 99);

            SECTION("onNegativeSide & onPositiveSide") {
                VectorDIM normal(1,1,1);
                Hyperplane hp(normal, 4);
                REQUIRE(!bez.onNegativeSide(hp));
                REQUIRE(!bez.onNonPositiveSide(hp));

                VectorDIM normal2(-1, -1, 2);
                Hyperplane hp2(normal2, -1);
                REQUIRE(bez.onNegativeSide(hp2));
                REQUIRE(bez.onNonPositiveSide(hp2));


                Hyperplane hp3(normal2, 0);
                REQUIRE(!bez.onNegativeSide(hp3));
                REQUIRE(bez.onNonPositiveSide(hp3));
            }
        }
    }

    SECTION("bezier with control points") {
        Bez bez;

        bez.appendControlPoint(VectorDIM(1, 2, 3));
        bez.appendControlPoint(VectorDIM(2, 2, 3));
        bez.appendControlPoint(VectorDIM(3, 2, 1));

        REQUIRE(bez.numControlPoints() == 3);

        bez.removeControlPoint(1);
        REQUIRE(bez[0] == VectorDIM(1, 2, 3));
        REQUIRE(bez[1] == VectorDIM(3, 2, 1));
        REQUIRE(bez.numControlPoints() == 2);

        bez.appendControlPoint(VectorDIM(2, 2.3, 3.4));
        bez.appendControlPoint(VectorDIM(3, 2.2, 3.1));
        bez.appendControlPoint(VectorDIM(2.2314, 2.231, 2.22));
        bez.appendControlPoint(VectorDIM(-2.11, -.231, 1.2));
        bez.appendControlPoint(VectorDIM(-5, -5, -5));

        REQUIRE(bez.numControlPoints() == 7);

        bez.maxParameter(3.5);
        REQUIRE(bez.maxParameter() == 3.5);

        REQUIRE_THROWS_AS(bez.eval(-1, 0), std::domain_error);
        REQUIRE_THROWS_AS(bez.eval(3.50000001, 0), std::domain_error);

        REQUIRE(bez.eval(1.2, 9) == zero_vecdim);
    
        REQUIRE((bez.eval(0.1, 0) - VectorDIM(1.3083683839412488, 2.0033587482309585, 2.7077993750767115)).norm() < double_eq_epsilon);
        REQUIRE((bez.eval(0, 0) - bez[0]).norm() < double_eq_epsilon);
        REQUIRE((bez.eval(3.5, 0) - bez[6]).norm() < double_eq_epsilon);
        REQUIRE((bez.eval(0.111 ,0) - VectorDIM(1.3383694241843003, 2.0040973541448315, 2.6814193887593163)).norm() < double_eq_epsilon);
        REQUIRE((bez.eval(0.22, 1) - VectorDIM(2.1149983786062885, 0.11889184332111918, -1.5010478716032567)).norm() < double_eq_epsilon);
        REQUIRE((bez.eval(0.37, 2) - VectorDIM(-3.486583859387949, 0.16434710152038, 4.813030336097375)).norm() < double_eq_epsilon);
        REQUIRE((bez.eval(0.12, 3) - VectorDIM(11.575138623483749, -1.6469262980642423, -17.32425004901019)).norm() < double_eq_epsilon);
        REQUIRE((bez.eval(2.76, 6) - VectorDIM(-2.2987319909221484, 4.054212785489039, 2.7808821154450962)).norm() < double_eq_epsilon);
        REQUIRE((bez.eval(2.76, 6) - bez.eval(3.4, 6)).norm() < double_eq_epsilon);
        REQUIRE((bez.eval(2.22, 7) - zero_vecdim).norm() < double_eq_epsilon);

    }
}


TEST_CASE("splx::internal::bezier::bernsteinCoefficientMatrix test") {
    double double_eq_epsilon = 1e-15;

    splx::BezierQPGenerator<double, 3> generator(8, 0.35914595895879409);

    auto bern = splx::internal::bezier::bernsteinCoefficientMatrix(7, 0.35914595895879409, 1);
    Eigen::Matrix<double, 8, 8> mtr;
    mtr << -19.490682897543422,19.490682897543422,0,0,0,0,0,0,
            325.61718841079289,-651.2343768215859,325.61718841079289,0,0,0,0,0,
            -2266.6076304658627,6799.822891397589,-6799.8228913975881,2266.6076304658627,0,0,0,0,
            8414.8058244880795,-33659.223297952318,50488.834946928473,-33659.223297952318,8414.8058244880795,0,0,0,
            -17572.53342530342,87862.667126517103,-175725.33425303421,175725.33425303421,-87862.667126517103,17572.53342530342,0,0,
            19571.467239946949,-117428.80343968168,293572.00859920419,-391429.34479893895,293572.00859920419,-117428.80343968165,19571.467239946949,0,
            -9082.4109955586973,63576.876968910881,-190730.63090673267,317884.38484455441,-317884.38484455441,190730.63090673267,-63576.876968910881,9082.4109955586973,
            0,0,0,0,0,0,0,0;
    REQUIRE((bern.transpose()-mtr).squaredNorm() < double_eq_epsilon);

    bern = splx::internal::bezier::bernsteinCoefficientMatrix(7, 0.35914595895879409, 2);
    mtr << 325.61718841079289,-651.2343768215859,325.61718841079289,0,0,0,0,0,-4533.2152609317254,13599.645782795178,-13599.645782795176,4533.2152609317254,0,0,0,0,25244.417473464237,-100977.66989385695,151466.5048407854,-100977.66989385695,25244.417473464237,0,0,0,-70290.133701213679,351450.66850606841,-702901.33701213682,702901.33701213682,-351450.66850606841,70290.133701213679,0,0,97857.336199734738,-587144.01719840837,1467860.0429960208,-1957146.7239946947,1467860.0429960208,-587144.01719840826,97857.336199734738,0,-54494.465973352191,381461.26181346527,-1144383.7854403961,1907306.3090673264,-1907306.3090673264,1144383.7854403961,-381461.26181346527,54494.465973352191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    REQUIRE((bern.transpose()-mtr).squaredNorm() < double_eq_epsilon);

    bern = splx::internal::bezier::bernsteinCoefficientMatrix(7, 0.35914595895879409, 4);
    mtr << 50488.834946928473,-201955.33978771389,302933.00968157081,-201955.33978771389,50488.834946928473,0,0,0,-421740.8022072821,2108704.0110364105,-4217408.0220728209,4217408.0220728209,-2108704.0110364105,421740.8022072821,0,0,1174288.0343968167,-7045728.2063809,17614320.515952252,-23485760.687936336,17614320.515952252,-7045728.2063808991,1174288.0343968167,0,-1089889.3194670437,7629225.2362693055,-22887675.708807919,38146126.181346528,-38146126.181346528,22887675.708807919,-7629225.2362693055,1089889.3194670437,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;

    REQUIRE((bern.transpose()-mtr).squaredNorm() < double_eq_epsilon);
}

TEST_CASE("BezierQPGenerator.addIntegratedSquaredDerivativeCost test", "[BezierQPGenerator]") {
    double double_eq_epsilon = 1e-8;

    splx::BezierQPGenerator<double, 3> generator(8, 0.35914595895879409);
    const auto& problem = generator.getProblem();
    Eigen::Matrix<double, 24, 24> mtr;

    generator.addIntegratedSquaredDerivativeCost(1, 1);
    mtr << 20.989966197349517,-10.494983098654835,-5.7245362356817093,-2.8622681177863356,-1.2721191634920832,-0.47704468629948193,-0.13629848180174356,-0.022716413633321351,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.494983098666431,11.44907247123512,2.8622681179087928,-0.63605958181478872,-1.4311340588764301,-1.0903878544156194,-0.52247751356938277,-0.13629848180124368,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.7245362356624501,2.8622681178795366,3.816357490366725,1.9081787452446726,-0.1362984818101971,-1.1585370953072367,-1.0903878544074344,-0.47704468630358088,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.8622681178132456,-0.63605958176630928,1.9081787452601837,2.7259696359767034,1.7037310225374895,-0.13629848180948656,-1.4311340589086541,-1.2721191634766778,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2721191634772162,-1.4311340589201933,-0.13629848176794468,1.7037310224771858,2.7259696360363108,1.9081787452105345,-0.63605958173775079,-2.8622681178208551,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.47704468630552732,-1.090387854394649,-1.1585370953368823,-0.1362984817743893,1.9081787452022638,3.8163574904301214,2.8622681178209461,-5.7245362356420255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.13629848180168658,-0.52247751356846095,-1.0903878544108352,-1.4311340589080714,-0.63605958173883437,2.8622681178208893,11.449072471284332,-10.494983098677205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.022716413633407484,-0.13629848180133308,-0.47704468630371366,-1.2721191634765319,-2.8622681178209177,-5.724536235642006,-10.494983098677238,20.989966197354466,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20.989966197349517,-10.494983098654835,-5.7245362356817093,-2.8622681177863356,-1.2721191634920832,-0.47704468629948193,-0.13629848180174356,-0.022716413633321351,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.494983098666431,11.44907247123512,2.8622681179087928,-0.63605958181478872,-1.4311340588764301,-1.0903878544156194,-0.52247751356938277,-0.13629848180124368,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.7245362356624501,2.8622681178795366,3.816357490366725,1.9081787452446726,-0.1362984818101971,-1.1585370953072367,-1.0903878544074344,-0.47704468630358088,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.8622681178132456,-0.63605958176630928,1.9081787452601837,2.7259696359767034,1.7037310225374895,-0.13629848180948656,-1.4311340589086541,-1.2721191634766778,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2721191634772162,-1.4311340589201933,-0.13629848176794468,1.7037310224771858,2.7259696360363108,1.9081787452105345,-0.63605958173775079,-2.8622681178208551,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.47704468630552732,-1.090387854394649,-1.1585370953368823,-0.1362984817743893,1.9081787452022638,3.8163574904301214,2.8622681178209461,-5.7245362356420255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.13629848180168658,-0.52247751356846095,-1.0903878544108352,-1.4311340589080714,-0.63605958173883437,2.8622681178208893,11.449072471284332,-10.494983098677205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.022716413633407484,-0.13629848180133308,-0.47704468630371366,-1.2721191634765319,-2.8622681178209177,-5.724536235642006,-10.494983098677238,20.989966197354466,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20.989966197349517,-10.494983098654835,-5.7245362356817093,-2.8622681177863356,-1.2721191634920832,-0.47704468629948193,-0.13629848180174356,-0.022716413633321351,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.494983098666431,11.44907247123512,2.8622681179087928,-0.63605958181478872,-1.4311340588764301,-1.0903878544156194,-0.52247751356938277,-0.13629848180124368,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.7245362356624501,2.8622681178795366,3.816357490366725,1.9081787452446726,-0.1362984818101971,-1.1585370953072367,-1.0903878544074344,-0.47704468630358088,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.8622681178132456,-0.63605958176630928,1.9081787452601837,2.7259696359767034,1.7037310225374895,-0.13629848180948656,-1.4311340589086541,-1.2721191634766778,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.2721191634772162,-1.4311340589201933,-0.13629848176794468,1.7037310224771858,2.7259696360363108,1.9081787452105345,-0.63605958173775079,-2.8622681178208551,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.47704468630552732,-1.090387854394649,-1.1585370953368823,-0.1362984817743893,1.9081787452022638,3.8163574904301214,2.8622681178209461,-5.7245362356420255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.13629848180168658,-0.52247751356846095,-1.0903878544108352,-1.4311340589080714,-0.63605958173883437,2.8622681178208893,11.449072471284332,-10.494983098677205,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.022716413633407484,-0.13629848180133308,-0.47704468630371366,-1.2721191634765319,-2.8622681178209177,-5.724536235642006,-10.494983098677238,20.989966197354466;
    REQUIRE((mtr-problem.Q()).squaredNorm() < double_eq_epsilon);

    generator.addIntegratedSquaredDerivativeCost(2, 0.5);
    mtr << 3482.7179836360197,-5203.0870092562955,763.54835652739337,477.93328986103165,273.4681996801113,136.89311473612869,54.811765287015504,13.71429952859126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5203.0870092559026,8858.0873392551657,-2208.7972985720553,-1099.5973349653198,-413.54161232257627,-56.038451624015529,68.162602197655104,54.811765287051713,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,763.54835652749887,-2208.7972985747642,1652.2582705488455,276.6484975965746,-274.87661732986953,-289.63587188070835,-56.038451623410033,136.89311473583334,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477.93328986134628,-1099.5973349656515,276.6484976003681,552.20660731568455,207.75897015979049,-274.87661732711854,-413.54161232524262,273.46819968082133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273.46819967980531,-413.5416123207965,-274.87661733445753,207.75897016365741,552.20660732047168,276.64849759083518,-1099.5973349593087,477.93328985979144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136.89311473650258,-56.038451625987037,-289.63587187716507,-274.87661733036578,276.64849759160359,1652.2582705560017,-2208.7972985791389,763.54835652854729,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54.811765287064944,68.162602197447981,-56.038451622988248,-413.54161232577798,-1099.5973349588751,-2208.7972985792762,8858.0873392592512,-5203.0870092568312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13.714299528591436,54.811765287030738,136.89311473591835,273.46819968076386,477.93328985983987,763.54835652854536,-5203.0870092568366,3482.7179836361283,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3482.7179836360197,-5203.0870092562955,763.54835652739337,477.93328986103165,273.4681996801113,136.89311473612869,54.811765287015504,13.71429952859126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5203.0870092559026,8858.0873392551657,-2208.7972985720553,-1099.5973349653198,-413.54161232257627,-56.038451624015529,68.162602197655104,54.811765287051713,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,763.54835652749887,-2208.7972985747642,1652.2582705488455,276.6484975965746,-274.87661732986953,-289.63587188070835,-56.038451623410033,136.89311473583334,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477.93328986134628,-1099.5973349656515,276.6484976003681,552.20660731568455,207.75897015979049,-274.87661732711854,-413.54161232524262,273.46819968082133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273.46819967980531,-413.5416123207965,-274.87661733445753,207.75897016365741,552.20660732047168,276.64849759083518,-1099.5973349593087,477.93328985979144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136.89311473650258,-56.038451625987037,-289.63587187716507,-274.87661733036578,276.64849759160359,1652.2582705560017,-2208.7972985791389,763.54835652854729,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54.811765287064944,68.162602197447981,-56.038451622988248,-413.54161232577798,-1099.5973349588751,-2208.7972985792762,8858.0873392592512,-5203.0870092568312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13.714299528591436,54.811765287030738,136.89311473591835,273.46819968076386,477.93328985983987,763.54835652854536,-5203.0870092568366,3482.7179836361283,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3482.7179836360197,-5203.0870092562955,763.54835652739337,477.93328986103165,273.4681996801113,136.89311473612869,54.811765287015504,13.71429952859126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5203.0870092559026,8858.0873392551657,-2208.7972985720553,-1099.5973349653198,-413.54161232257627,-56.038451624015529,68.162602197655104,54.811765287051713,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,763.54835652749887,-2208.7972985747642,1652.2582705488455,276.6484975965746,-274.87661732986953,-289.63587188070835,-56.038451623410033,136.89311473583334,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477.93328986134628,-1099.5973349656515,276.6484976003681,552.20660731568455,207.75897015979049,-274.87661732711854,-413.54161232524262,273.46819968082133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273.46819967980531,-413.5416123207965,-274.87661733445753,207.75897016365741,552.20660732047168,276.64849759083518,-1099.5973349593087,477.93328985979144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136.89311473650258,-56.038451625987037,-289.63587187716507,-274.87661733036578,276.64849759160359,1652.2582705560017,-2208.7972985791389,763.54835652854729,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54.811765287064944,68.162602197447981,-56.038451622988248,-413.54161232577798,-1099.5973349588751,-2208.7972985792762,8858.0873392592512,-5203.0870092568312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13.714299528591436,54.811765287030738,136.89311473591835,273.46819968076386,477.93328985983987,763.54835652854536,-5203.0870092568366,3482.7179836361283;
    REQUIRE((mtr-problem.Q()).squaredNorm() < double_eq_epsilon);

    generator.addIntegratedSquaredDerivativeCost(4, 0.10000000000000001);
    mtr << 26160826.385192718,-91555905.922241077,109861606.95063484,-45774873.484326296,273.46819979932059,136.89311475475515,54.811765251625246,1307880.8976599921,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-91555905.922241122,329591388.29417425,-411980371.55584264,183100306.07312971,-413.54161275110329,-56.03845159935743,-9155002.1209210269,54.811765318028229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109861606.95063435,-411980371.55583978,549305869.2696569,-274651831.85719264,-274.87662104794651,27464921.214699276,-56.03845205708128,136.89311479778638,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-45774873.48432669,183100306.07313204,-274651831.85720479,183101957.87707812,-45775143.658649467,-274.87661655997647,-413.54161232524262,273.46819968082133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273.46819914336351,-413.54160904254104,-274.8766256791078,-45775143.658634283,183101957.87706181,-274651831.85719383,183100306.07312739,-45774873.484325849,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136.89311454278749,-56.038451029940589,27464921.214696418,-274.87661923771441,-274651831.85719538,549305869.26966023,-411980371.55584109,109861606.95063467,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54.81176524236146,-9155002.1209205277,-56.038451861406827,-413.54161137210366,183100306.07312861,-411980371.55584157,329591388.29417318,-91555905.922240928,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1307880.897659986,54.811765316833061,136.89311461670906,273.46819956155457,-45774873.484325908,109861606.95063484,-91555905.922240958,26160826.385192696,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26160826.385192718,-91555905.922241077,109861606.95063484,-45774873.484326296,273.46819979932059,136.89311475475515,54.811765251625246,1307880.8976599921,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-91555905.922241122,329591388.29417425,-411980371.55584264,183100306.07312971,-413.54161275110329,-56.03845159935743,-9155002.1209210269,54.811765318028229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109861606.95063435,-411980371.55583978,549305869.2696569,-274651831.85719264,-274.87662104794651,27464921.214699276,-56.03845205708128,136.89311479778638,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-45774873.48432669,183100306.07313204,-274651831.85720479,183101957.87707812,-45775143.658649467,-274.87661655997647,-413.54161232524262,273.46819968082133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273.46819914336351,-413.54160904254104,-274.8766256791078,-45775143.658634283,183101957.87706181,-274651831.85719383,183100306.07312739,-45774873.484325849,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136.89311454278749,-56.038451029940589,27464921.214696418,-274.87661923771441,-274651831.85719538,549305869.26966023,-411980371.55584109,109861606.95063467,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54.81176524236146,-9155002.1209205277,-56.038451861406827,-413.54161137210366,183100306.07312861,-411980371.55584157,329591388.29417318,-91555905.922240928,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1307880.897659986,54.811765316833061,136.89311461670906,273.46819956155457,-45774873.484325908,109861606.95063484,-91555905.922240958,26160826.385192696,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26160826.385192718,-91555905.922241077,109861606.95063484,-45774873.484326296,273.46819979932059,136.89311475475515,54.811765251625246,1307880.8976599921,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-91555905.922241122,329591388.29417425,-411980371.55584264,183100306.07312971,-413.54161275110329,-56.03845159935743,-9155002.1209210269,54.811765318028229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109861606.95063435,-411980371.55583978,549305869.2696569,-274651831.85719264,-274.87662104794651,27464921.214699276,-56.03845205708128,136.89311479778638,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-45774873.48432669,183100306.07313204,-274651831.85720479,183101957.87707812,-45775143.658649467,-274.87661655997647,-413.54161232524262,273.46819968082133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273.46819914336351,-413.54160904254104,-274.8766256791078,-45775143.658634283,183101957.87706181,-274651831.85719383,183100306.07312739,-45774873.484325849,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136.89311454278749,-56.038451029940589,27464921.214696418,-274.87661923771441,-274651831.85719538,549305869.26966023,-411980371.55584109,109861606.95063467,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54.81176524236146,-9155002.1209205277,-56.038451861406827,-413.54161137210366,183100306.07312861,-411980371.55584157,329591388.29417318,-91555905.922240928,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1307880.897659986,54.811765316833061,136.89311461670906,273.46819956155457,-45774873.484325908,109861606.95063484,-91555905.922240958,26160826.385192696;
    REQUIRE((mtr-problem.Q()).squaredNorm() < double_eq_epsilon);
}

TEST_CASE("BezierQPGenerator.addEvalCost test", "[BezierQPGenerator]") {
    double double_eq_epsilon = 1e-20;

    using Bez = splx::Bezier<double, 3>;
    using VectorDIM = Bez::VectorDIM;

    splx::BezierQPGenerator<double, 3> generator(8, 3.3371708144841823);
    const auto& problem = generator.getProblem();

    generator.addEvalCost(3.3371708144841818, 0, VectorDIM(-1.419999999999999, 0.58000000000000074, -0.0099999999999999811), 10);

    Eigen::Matrix<double, 24, 24> q_mtr;
    q_mtr << 6.1629758220391547e-30,-3.5498740734945531e-28,5.9164567891575885e-28,-2.3665827156630354e-28,-7.8886090522101181e-29,3.944304526105059e-29,0,1.1102230246251559e-14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.5498740734945531e-28,2.0447274663328626e-26,-3.407879110554771e-26,1.3631516442219084e-26,4.543838814073028e-27,-2.271919407036514e-27,0,-6.3948846218408976e-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.9164567891575885e-28,-3.407879110554771e-26,5.679798517591285e-26,-2.271919407036514e-26,-7.5730646901217133e-27,3.7865323450608567e-27,0,1.0658141036401497e-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.3665827156630354e-28,1.3631516442219084e-26,-2.271919407036514e-26,9.087677628146056e-27,3.0292258760486853e-27,-1.5146129380243427e-27,0,-4.2632564145605986e-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7.8886090522101181e-29,4.543838814073028e-27,-7.5730646901217133e-27,3.0292258760486853e-27,1.0097419586828951e-27,-5.0487097934144756e-28,0,-1.4210854715201996e-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.944304526105059e-29,-2.271919407036514e-27,3.7865323450608567e-27,-1.5146129380243427e-27,-5.0487097934144756e-28,2.5243548967072378e-28,0,7.1054273576009981e-14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.1102230246251559e-14,-6.3948846218408986e-13,1.0658141036401497e-12,-4.2632564145605991e-13,-1.4210854715201996e-13,7.1054273576009981e-14,0,19.999999999999979,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6.1629758220391547e-30,-3.5498740734945531e-28,5.9164567891575885e-28,-2.3665827156630354e-28,-7.8886090522101181e-29,3.944304526105059e-29,0,1.1102230246251559e-14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.5498740734945531e-28,2.0447274663328626e-26,-3.407879110554771e-26,1.3631516442219084e-26,4.543838814073028e-27,-2.271919407036514e-27,0,-6.3948846218408976e-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.9164567891575885e-28,-3.407879110554771e-26,5.679798517591285e-26,-2.271919407036514e-26,-7.5730646901217133e-27,3.7865323450608567e-27,0,1.0658141036401497e-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.3665827156630354e-28,1.3631516442219084e-26,-2.271919407036514e-26,9.087677628146056e-27,3.0292258760486853e-27,-1.5146129380243427e-27,0,-4.2632564145605986e-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7.8886090522101181e-29,4.543838814073028e-27,-7.5730646901217133e-27,3.0292258760486853e-27,1.0097419586828951e-27,-5.0487097934144756e-28,0,-1.4210854715201996e-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.944304526105059e-29,-2.271919407036514e-27,3.7865323450608567e-27,-1.5146129380243427e-27,-5.0487097934144756e-28,2.5243548967072378e-28,0,7.1054273576009981e-14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.1102230246251559e-14,-6.3948846218408986e-13,1.0658141036401497e-12,-4.2632564145605991e-13,-1.4210854715201996e-13,7.1054273576009981e-14,0,19.999999999999979,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6.1629758220391547e-30,-3.5498740734945531e-28,5.9164567891575885e-28,-2.3665827156630354e-28,-7.8886090522101181e-29,3.944304526105059e-29,0,1.1102230246251559e-14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.5498740734945531e-28,2.0447274663328626e-26,-3.407879110554771e-26,1.3631516442219084e-26,4.543838814073028e-27,-2.271919407036514e-27,0,-6.3948846218408976e-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.9164567891575885e-28,-3.407879110554771e-26,5.679798517591285e-26,-2.271919407036514e-26,-7.5730646901217133e-27,3.7865323450608567e-27,0,1.0658141036401497e-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.3665827156630354e-28,1.3631516442219084e-26,-2.271919407036514e-26,9.087677628146056e-27,3.0292258760486853e-27,-1.5146129380243427e-27,0,-4.2632564145605986e-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7.8886090522101181e-29,4.543838814073028e-27,-7.5730646901217133e-27,3.0292258760486853e-27,1.0097419586828951e-27,-5.0487097934144756e-28,0,-1.4210854715201996e-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.944304526105059e-29,-2.271919407036514e-27,3.7865323450608567e-27,-1.5146129380243427e-27,-5.0487097934144756e-28,2.5243548967072378e-28,0,7.1054273576009981e-14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.1102230246251559e-14,-6.3948846218408986e-13,1.0658141036401497e-12,-4.2632564145605991e-13,-1.4210854715201996e-13,7.1054273576009981e-14,0,19.999999999999979;
    Eigen::Matrix<double, 24, 1> c_mtr;
    c_mtr << 1.5765166949677213e-14,-9.0807361630140741e-13, 1.5134560271690124e-12,-6.0538241086760497e-13,-2.0179413695586832e-13, 1.0089706847793416e-13,                      0,     28.399999999999967,-6.4392935428259166e-15, 3.7090330806677282e-13,-6.1817218011128797e-13,  2.472688720445152e-13, 8.2422957348171733e-14,-4.1211478674085866e-14,                      0,    -11.600000000000009, 1.1102230246251544e-16,  -6.39488462184089e-15, 1.0658141036401482e-14,-4.2632564145605931e-15,-1.4210854715201977e-15, 7.1054273576009884e-16,                      0,    0.19999999999999951;

    REQUIRE((q_mtr - problem.Q()).squaredNorm() < double_eq_epsilon);
    REQUIRE((c_mtr - problem.c()).squaredNorm() < double_eq_epsilon);
}

TEST_CASE("BezierQPGenerator.addEvalConstraint test", "[BezierQPGenerator]") {
    double double_eq_epsilon = 1e-20;
    using Bez = splx::Bezier<double, 3>;
    using VectorDIM = Bez::VectorDIM;
    using Matrix = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>;
    using Vector = Eigen::Matrix<double, Eigen::Dynamic, 1>;

    splx::BezierQPGenerator<double, 3> generator(8, 0.35914595895879409);
    const auto& problem = generator.getProblem();

    generator.addEvalConstraint(0, 0, VectorDIM(2.9406599999999998, 1.0991899999999999, 1.5));

    Matrix A(3, 24);
    A << 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0;
    Vector lbAubA(3);
    lbAubA << 2.9406599999999998, 1.0991899999999999, 1.5;

    REQUIRE((problem.A() - A).squaredNorm() < double_eq_epsilon);
    REQUIRE((problem.lb() - lbAubA).squaredNorm() < double_eq_epsilon);
    REQUIRE((problem.ub() - lbAubA).squaredNorm() < double_eq_epsilon);

    generator.addEvalConstraint(0, 1, VectorDIM(0, 0, 0));

    Matrix A2(6, 24);
    A2 << 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,-19.490682897543422,19.490682897543422,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-19.490682897543422,19.490682897543422,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-19.490682897543422,19.490682897543422,0,0,0,0,0,0;
    Vector lbAubA2(6);
    lbAubA2 << 2.9406599999999998,1.0991899999999999,       1.5,                                0,                                0, 0;
    
    REQUIRE((problem.A() - A2).squaredNorm() < double_eq_epsilon);
    REQUIRE((problem.lb() - lbAubA2).squaredNorm() < double_eq_epsilon);
    REQUIRE((problem.ub() - lbAubA2).squaredNorm() < double_eq_epsilon);

    generator.addEvalConstraint(0, 2, VectorDIM(0, -4.4408920985006262e-16, -8.8817841970012523e-16));

    Matrix A3(9, 24);
    A3 << 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,-19.490682897543422,19.490682897543422,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-19.490682897543422,19.490682897543422,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-19.490682897543422,19.490682897543422,0,0,0,0,0,0,325.61718841079289,-651.2343768215859,325.61718841079289,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,325.61718841079289,-651.2343768215859,325.61718841079289,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,325.61718841079289,-651.2343768215859,325.61718841079289,0,0,0,0,0;
    Vector lbAubA3(9);
    lbAubA3 << 2.9406599999999998,     1.0991899999999999,                    1.5,                      0,                      0,                      0,                      0,-4.4408920985006262e-16,-8.8817841970012523e-16;


    REQUIRE((problem.A() - A3).squaredNorm() < double_eq_epsilon);
    REQUIRE((problem.lb() - lbAubA3).squaredNorm() < double_eq_epsilon);
    REQUIRE((problem.ub() - lbAubA3).squaredNorm() < double_eq_epsilon);
}

TEST_CASE("BezierQPGenerator.addHyperplaneConstraintAll test", "[BezierQPGenerator]") {
    double double_eq_epsilon = 1e-20;
    using Bez = splx::Bezier<double, 3>;
    using VectorDIM = Bez::VectorDIM;
    using Matrix = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>;
    using Vector = Eigen::Matrix<double, Eigen::Dynamic, 1>;
    using Hyperplane = Bez::Hyperplane;

    splx::BezierQPGenerator<double, 3> generator(8, 0.35914595895879409);
    const auto& problem = generator.getProblem();

    Hyperplane hp(VectorDIM(-0.33978293614330024, -0.94050388425877218, 0), 1.3530713060329502);
    generator.addHyperplaneConstraintAll(hp);

    Matrix A(8, 24);
    A << -0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0;
    Vector lbA(8);
    lbA << -1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308;
    Vector ubA(8);
    ubA << -1.3530713060329502,-1.3530713060329502,-1.3530713060329502,-1.3530713060329502,-1.3530713060329502,-1.3530713060329502,-1.3530713060329502,-1.3530713060329502;

    REQUIRE((problem.A() - A).squaredNorm() < double_eq_epsilon);
    REQUIRE((problem.lb() - lbA).squaredNorm() < double_eq_epsilon);
    REQUIRE((problem.ub() - ubA).squaredNorm() < double_eq_epsilon);

    hp = Hyperplane(VectorDIM(-0.98607645223817975, 0.12060377007340634, -0.11449000386691315), -0.080065245088097869);
    generator.addHyperplaneConstraintAll(hp);

    Matrix A2(16, 24);
    A2 << -0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315;
    Vector lbA2(16);
    lbA2 << -1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308;
    Vector ubA2(16);
    ubA2 << -1.3530713060329502, -1.3530713060329502, -1.3530713060329502, -1.3530713060329502, -1.3530713060329502, -1.3530713060329502, -1.3530713060329502, -1.3530713060329502,0.080065245088097869,0.080065245088097869,0.080065245088097869,0.080065245088097869,0.080065245088097869,0.080065245088097869,0.080065245088097869,0.080065245088097869;

    REQUIRE((problem.A() - A2).squaredNorm() < double_eq_epsilon);
    REQUIRE((problem.lb() - lbA2).squaredNorm() < double_eq_epsilon);
    REQUIRE((problem.ub() - ubA2).squaredNorm() < double_eq_epsilon);

    hp = Hyperplane(VectorDIM(-0.9994132725843935, -0.034250701922042923, 0), -0.31160453231358842);
    generator.addHyperplaneConstraintAll(hp);

    Matrix A3(24, 24);
    A3 << -0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.33978293614330024,0,0,0,0,0,0,0,-0.94050388425877218,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,0,0,0,0,0,0,0,0,-0.98607645223817975,0,0,0,0,0,0,0,0.12060377007340634,0,0,0,0,0,0,0,-0.11449000386691315,-0.9994132725843935,0,0,0,0,0,0,0,-0.034250701922042923,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9994132725843935,0,0,0,0,0,0,0,-0.034250701922042923,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9994132725843935,0,0,0,0,0,0,0,-0.034250701922042923,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9994132725843935,0,0,0,0,0,0,0,-0.034250701922042923,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9994132725843935,0,0,0,0,0,0,0,-0.034250701922042923,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9994132725843935,0,0,0,0,0,0,0,-0.034250701922042923,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9994132725843935,0,0,0,0,0,0,0,-0.034250701922042923,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.9994132725843935,0,0,0,0,0,0,0,-0.034250701922042923,0,0,0,0,0,0,0,0;
    Vector lbA3(24);
    lbA3 << -1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308;
    Vector ubA3(24);
    ubA3 << -1.3530713060329502, -1.3530713060329502, -1.3530713060329502, -1.3530713060329502, -1.3530713060329502, -1.3530713060329502, -1.3530713060329502, -1.3530713060329502,0.080065245088097869,0.080065245088097869,0.080065245088097869,0.080065245088097869,0.080065245088097869,0.080065245088097869,0.080065245088097869,0.080065245088097869, 0.31160453231358842, 0.31160453231358842, 0.31160453231358842, 0.31160453231358842, 0.31160453231358842, 0.31160453231358842, 0.31160453231358842, 0.31160453231358842;

    REQUIRE((problem.A() - A3).squaredNorm() < double_eq_epsilon);
    REQUIRE((problem.lb() - lbA3).squaredNorm() < double_eq_epsilon);
    REQUIRE((problem.ub() - ubA3).squaredNorm() < double_eq_epsilon);
}